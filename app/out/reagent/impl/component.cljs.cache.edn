;; Analyzed by ClojureScript 0.0-2725
{:defs {elem-counter {:file "out/reagent/impl/component.cljs", :line 272, :column 1, :end-line 272, :end-column 19, :test true, :name reagent.impl.component/elem-counter}, get-wrapper {:protocol-inline nil, :name reagent.impl.component/get-wrapper, :variadic false, :file "out/reagent/impl/component.cljs", :end-column 19, :method-params ([key f name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any function}, :variadic false, :max-fixed-arity 3}), :line 152, :end-line 152, :max-fixed-arity 3, :fn-var true, :arglists (quote ([key f name])), :test true}, obligatory {:file "out/reagent/impl/component.cljs", :line 161, :column 1, :end-line 161, :end-column 17, :test true, :name reagent.impl.component/obligatory}, default-wrapper {:protocol-inline nil, :name reagent.impl.component/default-wrapper, :variadic false, :file "out/reagent/impl/component.cljs", :end-column 23, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil function}, :variadic false, :max-fixed-arity 1}), :line 138, :end-line 138, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, as-element {:protocol-inline nil, :name reagent.impl.component/as-element, :variadic false, :file "out/reagent/impl/component.cljs", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, do-render {:protocol-inline nil, :name reagent.impl.component/do-render, :variadic false, :file "out/reagent/impl/component.cljs", :end-column 17, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}, comp-name {:protocol-inline nil, :name reagent.impl.component/comp-name, :variadic false, :file "out/reagent/impl/component.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil string}, :variadic false, :max-fixed-arity 0}), :line 258, :end-line 258, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, add-obligatory {:protocol-inline nil, :name reagent.impl.component/add-obligatory, :variadic false, :file "out/reagent/impl/component.cljs", :end-column 22, :method-params ([fun-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 172, :end-line 172, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fun-map])), :test true}, state-atom {:protocol-inline nil, :name reagent.impl.component/state-atom, :variadic false, :file "out/reagent/impl/component.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, dash-to-camel {:file "out/reagent/impl/component.cljs", :line 165, :column 1, :end-line 165, :end-column 20, :test true, :name reagent.impl.component/dash-to-camel}, static-fns {:file "out/reagent/impl/component.cljs", :line 76, :column 1, :end-line 76, :end-column 17, :test true, :name reagent.impl.component/static-fns}, reagent-class? {:protocol-inline nil, :name reagent.impl.component/reagent-class?, :variadic false, :file "out/reagent/impl/component.cljs", :end-column 22, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}, reactify-component {:protocol-inline nil, :name reagent.impl.component/reactify-component, :variadic false, :file "out/reagent/impl/component.cljs", :end-column 26, :method-params ([comp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 274, :end-line 274, :max-fixed-arity 1, :fn-var true, :arglists (quote ([comp])), :test true}, map-to-js {:protocol-inline nil, :name reagent.impl.component/map-to-js, :variadic false, :file "out/reagent/impl/component.cljs", :end-column 17, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 216, :end-line 216, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :test true}, component-path {:protocol-inline nil, :name reagent.impl.component/component-path, :variadic false, :file "out/reagent/impl/component.cljs", :end-column 22, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 1}), :line 243, :end-line 243, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}, do-render-sub {:protocol-inline nil, :name reagent.impl.component/do-render-sub, :variadic false, :file "out/reagent/impl/component.cljs", :end-column 21, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}, *non-reactive* {:file "out/reagent/impl/component.cljs", :line 10, :column 1, :end-line 10, :end-column 35, :dynamic true, :declared true, :test true, :name reagent.impl.component/*non-reactive*}, dont-wrap {:file "out/reagent/impl/component.cljs", :line 144, :column 1, :end-line 144, :end-column 16, :test true, :name reagent.impl.component/dont-wrap}, fun-name {:protocol-inline nil, :name reagent.impl.component/fun-name, :variadic false, :file "out/reagent/impl/component.cljs", :end-column 16, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil boolean any string clj-nil}, :variadic false, :max-fixed-arity 1}), :line 183, :end-line 183, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, *current-component* {:file "out/reagent/impl/component.cljs", :line 8, :column 1, :end-line 8, :end-column 40, :dynamic true, :declared true, :test true, :name reagent.impl.component/*current-component*}, camelify-map-keys {:protocol-inline nil, :name reagent.impl.component/camelify-map-keys, :variadic false, :file "out/reagent/impl/component.cljs", :end-column 25, :method-params ([fun-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 167, :end-line 167, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fun-map])), :test true}, shallow-obj-to-map {:protocol-inline nil, :name reagent.impl.component/shallow-obj-to-map, :variadic false, :file "out/reagent/impl/component.cljs", :end-column 26, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj any cljs.core/MetaFn clj-nil}, :variadic false, :max-fixed-arity 1}), :line 268, :end-line 268, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o])), :test true}, cljsify {:protocol-inline nil, :name reagent.impl.component/cljsify, :variadic false, :file "out/reagent/impl/component.cljs", :end-column 15, :method-params ([body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 222, :end-line 222, :max-fixed-arity 1, :fn-var true, :arglists (quote ([body])), :test true}, dont-bind {:protocol-inline nil, :name reagent.impl.component/dont-bind, :variadic false, :file "out/reagent/impl/component.cljs", :end-column 17, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 146, :end-line 146, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, add-render {:protocol-inline nil, :name reagent.impl.component/add-render, :variadic false, :file "out/reagent/impl/component.cljs", :end-column 18, :method-params ([fun-map render-f name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 3}), :line 175, :end-line 175, :max-fixed-arity 3, :fn-var true, :arglists (quote ([fun-map render-f name])), :test true}, custom-wrapper {:protocol-inline nil, :name reagent.impl.component/custom-wrapper, :variadic false, :file "out/reagent/impl/component.cljs", :end-column 22, :method-params ([key f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 83, :end-line 83, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key f])), :test true}, create-class {:protocol-inline nil, :name reagent.impl.component/create-class, :variadic false, :file "out/reagent/impl/component.cljs", :end-column 20, :method-params ([body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 229, :end-line 229, :max-fixed-arity 1, :fn-var true, :arglists (quote ([body])), :test true}, wrap-funs {:protocol-inline nil, :name reagent.impl.component/wrap-funs, :variadic false, :file "out/reagent/impl/component.cljs", :end-column 17, :method-params ([fmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 193, :end-line 193, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fmap])), :test true}}, :name reagent.impl.component, :doc nil, :excludes #{}, :use-macros {dbg reagent.debug, .' reagent.interop, prn reagent.debug, warn reagent.debug, dev? reagent.debug, .! reagent.interop}, :require-macros {reagent.debug reagent.debug, reagent.interop reagent.interop}, :uses nil, :requires {reagent.debug reagent.debug, reagent.interop reagent.interop, ratom reagent.ratom, reagent.ratom reagent.ratom, batch reagent.impl.batching, reagent.impl.batching reagent.impl.batching, reagent.impl.util reagent.impl.util, util reagent.impl.util}, :imports nil}