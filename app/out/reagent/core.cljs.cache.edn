;; Analyzed by ClojureScript 0.0-2725
{:defs {current-component {:protocol-inline nil, :name reagent.core/current-component, :variadic false, :file "out/reagent/core.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 0}), :line 130, :end-line 130, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns the current React component (a.k.a this) in a component\n  function.", :test true}, as-component {:file "out/reagent/core.cljs", :line 87, :column 1, :end-line 87, :end-column 19, :test true, :name reagent.core/as-component}, adapt-react-class {:protocol-inline nil, :name reagent.core/adapt-react-class, :variadic false, :file "out/reagent/core.cljs", :end-column 25, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag reagent.impl.template/NativeWrapper, :variadic false, :max-fixed-arity 1}), :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "Returns an adapter for a native React class, that may be used\njust like a Reagent component function or class in Hiccup forms.", :test true}, atom {:protocol-inline nil, :name reagent.core/atom, :variadic true, :file "out/reagent/core.cljs", :end-column 12, :method-params ([x] [x rest]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag reagent.ratom/RAtom, :variadic false, :max-fixed-arity 1} {:tag any, :variadic true, :max-fixed-arity 1}), :line 217, :end-line 217, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x] [x & rest])), :doc "Like clojure.core/atom, except that it keeps track of derefs.\nReagent components that derefs one of these are automatically\nre-rendered.", :test true}, merge-props {:protocol-inline nil, :name reagent.core/merge-props, :variadic false, :file "out/reagent/core.cljs", :end-column 19, :method-params ([defaults props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj}, :variadic false, :max-fixed-arity 2}), :line 199, :end-line 199, :max-fixed-arity 2, :fn-var true, :arglists (quote ([defaults props])), :doc "Utility function that merges two maps, handling :class and :style\nspecially, like React's transferPropsTo.", :test true}, force-update-all {:protocol-inline nil, :name reagent.core/force-update-all, :variadic false, :file "out/reagent/core.cljs", :end-column 33, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :methods ({:tag string, :variadic false, :max-fixed-arity 0}), :line 97, :end-line 97, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead.", :test true}, as-element {:protocol-inline nil, :name reagent.core/as-element, :variadic false, :file "out/reagent/core.cljs", :end-column 18, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form])), :doc "Turns a vector of Hiccup syntax into a React element. Returns form unchanged if it is not a vector.", :test true}, next-tick {:protocol-inline nil, :name reagent.core/next-tick, :variadic false, :file "out/reagent/core.cljs", :end-column 17, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 280, :end-line 280, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Run f using requestAnimationFrame or equivalent.", :test true}, props {:protocol-inline nil, :name reagent.core/props, :variadic false, :file "out/reagent/core.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 176, :end-line 176, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the props passed to a component.", :test true}, state-atom {:protocol-inline nil, :name reagent.core/state-atom, :variadic false, :file "out/reagent/core.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 136, :end-line 136, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns an atom containing a components state.", :test true}, flush {:protocol-inline nil, :name reagent.core/flush, :variadic false, :file "out/reagent/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 205, :end-line 205, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Render dirty components immediately to the DOM.\n\nNote that this may not work in event handlers, since React.js does\nbatching of updates there.", :test true}, children {:protocol-inline nil, :name reagent.core/children, :variadic false, :file "out/reagent/core.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{cljs.core/Subvec clj-nil}, :variadic false, :max-fixed-arity 1}), :line 182, :end-line 182, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the children passed to a component.", :test true}, wrap {:protocol-inline nil, :name reagent.core/wrap, :variadic true, :file "out/reagent/core.cljs", :end-column 12, :method-params ([value reset-fn args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag reagent.ratom/Wrapper, :variadic true, :max-fixed-arity 2}), :line 225, :end-line 225, :max-fixed-arity 2, :fn-var true, :arglists (quote ([value reset-fn & args])), :doc "Provide a combination of value and callback, that looks like an atom.\n\n  The first argument can be any value, that will be returned when the\n  result is deref'ed.\n\n  The second argument should be a function, that is called with the\n  optional extra arguments provided to wrap, and the new value of the\n  resulting 'atom'.\n\n  Use for example like this:\n\n  (wrap (:foo @state)\n        swap! state assoc :foo)\n\n  Probably useful only for passing to child components.", :test true}, reactify-component {:protocol-inline nil, :name reagent.core/reactify-component, :variadic false, :file "out/reagent/core.cljs", :end-column 26, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "Returns an adapter for a Reagent component, that may be used from\n  React, for example in JSX. A single argument, props, is passed to\n  the component, converted to a map.", :test true}, unmount-component-at-node {:protocol-inline nil, :name reagent.core/unmount-component-at-node, :variadic false, :file "out/reagent/core.cljs", :end-column 33, :method-params ([container]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([container])), :doc "Remove a component from the given DOM node.", :test true}, render-component {:file "out/reagent/core.cljs", :line 88, :column 1, :end-line 88, :end-column 23, :test true, :name reagent.core/render-component}, render-to-string {:protocol-inline nil, :name reagent.core/render-to-string, :variadic false, :file "out/reagent/core.cljs", :end-column 24, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 80, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "Turns a component into an HTML string.", :test true}, component-path {:protocol-inline nil, :name reagent.core/component-path, :variadic false, :file "out/reagent/core.cljs", :end-column 22, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 1}), :line 291, :end-line 291, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}, cursor {:protocol-inline nil, :name reagent.core/cursor, :variadic false, :file "out/reagent/core.cljs", :end-column 14, :method-params ([src path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag reagent.ratom/RCursor, :variadic false, :max-fixed-arity 2}), :line 248, :end-line 248, :max-fixed-arity 2, :fn-var true, :arglists (quote ([src path])), :doc "Provide a cursor into a Reagent atom.\n\nBehaves like a Reagent atom but focuses updates and derefs to\nthe specified path within the wrapped Reagent atom. e.g.,\n  (let [c (cursor ra [:nested :content])]\n    ... @c ;; equivalent to (get-in @ra [:nested :content])\n    ... (reset! c 42) ;; equivalent to (swap! ra assoc-in [:nested :content] 42)\n    ... (swap! c inc) ;; equivalence to (swap! ra update-in [:nested :content] inc)\n    )\n\nThe first parameter can also be a function, that should look something\nlike this:\n\n(defn set-get\n  ([k] (get-in @state k))\n  ([k v] (swap! state assoc-in k v)))\n\nThe function will be called with one argument – the path passed to\ncursor – when the cursor is deref'ed, and two arguments (path and new\nvalue) when the cursor is modified.\n\nGiven that set-get function, (and that state is a Reagent atom, or\nanother cursor) these cursors are equivalent:\n(cursor state [:foo]) and (cursor set-get [:foo]).\n", :test true}, state {:protocol-inline nil, :name reagent.core/state, :variadic false, :file "out/reagent/core.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 142, :end-line 142, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the state of a component, as set with replace-state or set-state.\nEquivalent to (deref (r/state-atom this))", :test true}, render-component-to-string {:file "out/reagent/core.cljs", :line 89, :column 1, :end-line 89, :end-column 33, :test true, :name reagent.core/render-component-to-string}, render-to-static-markup {:protocol-inline nil, :name reagent.core/render-to-static-markup, :variadic false, :file "out/reagent/core.cljs", :end-column 31, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 91, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "Turns a component into an HTML string, without data-react-id attributes, etc.", :test true}, dom-node {:protocol-inline nil, :name reagent.core/dom-node, :variadic false, :file "out/reagent/core.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 194, :end-line 194, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the root DOM node of a mounted component.", :test true}, is-client {:file "out/reagent/core.cljs", :line 13, :column 1, :end-line 13, :end-column 16, :test true, :name reagent.core/is-client}, replace-state {:protocol-inline nil, :name reagent.core/replace-state, :variadic false, :file "out/reagent/core.cljs", :end-column 21, :method-params ([this new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 149, :end-line 149, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-state])), :doc "Set state of a component.\nEquivalent to (reset! (state-atom this) new-state)", :test true}, partial {:protocol-inline nil, :name reagent.core/partial, :variadic true, :file "out/reagent/core.cljs", :end-column 15, :method-params ([f args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag reagent.impl.util/partial-ifn, :variadic true, :max-fixed-arity 1}), :line 285, :end-line 285, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f & args])), :doc "Works just like clojure.core/partial, except that it is an IFn, and\nthe result can be compared with =", :test true}, set-state {:protocol-inline nil, :name reagent.core/set-state, :variadic false, :file "out/reagent/core.cljs", :end-column 17, :method-params ([this new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 157, :end-line 157, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-state])), :doc "Merge component state with new-state.\nEquivalent to (swap! (state-atom this) merge new-state)", :test true}, argv {:protocol-inline nil, :name reagent.core/argv, :variadic false, :file "out/reagent/core.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 188, :end-line 188, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the entire Hiccup form passed to the component.", :test true}, render {:protocol-inline nil, :name reagent.core/render, :variadic false, :file "out/reagent/core.cljs", :end-column 14, :method-params ([comp container] [comp container callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:tag any, :variadic false, :max-fixed-arity 3}), :line 61, :end-line 61, :max-fixed-arity 3, :fn-var true, :arglists (quote ([comp container] [comp container callback])), :doc "Render a Reagent component into the DOM. The first argument may be \neither a vector (using Reagent's Hiccup syntax), or a React element. The second argument should be a DOM node.\n\nOptionally takes a callback that is called when the component is in place.\n\nReturns the mounted component instance.", :test true}, force-update {:protocol-inline nil, :name reagent.core/force-update, :variadic false, :file "out/reagent/core.cljs", :end-column 20, :method-params ([this] [this deep]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:tag any, :variadic false, :max-fixed-arity 2}), :line 165, :end-line 165, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this] [this deep])), :doc "Force a component to re-render immediately.\n\n  If the second argument is true, child components will also be\n  re-rendered, even is their arguments have not changed.", :test true}, create-class {:protocol-inline nil, :name reagent.core/create-class, :variadic false, :file "out/reagent/core.cljs", :end-column 20, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 110, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "Create a component, React style. Should be called with a map,\nlooking like this:\n{:get-initial-state (fn [this])\n:component-will-receive-props (fn [this new-argv])\n:should-component-update (fn [this old-argv new-argv])\n:component-will-mount (fn [this])\n:component-did-mount (fn [this])\n:component-will-update (fn [this new-argv])\n:component-did-update (fn [this old-argv])\n:component-will-unmount (fn [this])\n:reagent-render (fn [args....])   ;; or :render (fn [this])\n}\n\nEverything is optional, except either :reagent-render or :render.\n", :test true}, create-element {:protocol-inline nil, :name reagent.core/create-element, :variadic true, :file "out/reagent/core.cljs", :end-column 22, :method-params ([type] [type props] [type props child] [type props child children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:tag any, :variadic false, :max-fixed-arity 2} {:tag any, :variadic false, :max-fixed-arity 3} {:tag any, :variadic true, :max-fixed-arity 3}), :line 15, :end-line 15, :max-fixed-arity 3, :fn-var true, :arglists (quote ([type] [type props] [type props child] [type props child & children])), :doc "Create a native React element, by calling React.createElement directly.\n\nThat means the second argument must be a javascript object (or nil), and\nthat any Reagent hiccup forms must be processed with as-element. For example\nlike this:\n\n   (r/create-element \"div\" #js{:className \"foo\"}\n      \"Hi \" (r/as-element [:strong \"world!\"])\n\nwhich is equivalent to\n\n   [:div.foo \"Hi\" [:strong \"world!\"]]\n", :test true}}, :name reagent.core, :doc nil, :excludes #{atom flush partial}, :use-macros {dbg reagent.debug, .' reagent.interop, prn reagent.debug, .! reagent.interop}, :require-macros {reagent.interop reagent.interop, reagent.debug reagent.debug, deb reagent.debug}, :uses nil, :requires {reagent.impl.util reagent.impl.util, comp reagent.impl.component, reagent.interop reagent.interop, reagent.ratom reagent.ratom, cljsjs.react cljsjs.react, reagent.impl.template reagent.impl.template, reagent.impl.batching reagent.impl.batching, reagent.impl.component reagent.impl.component, util reagent.impl.util, tmpl reagent.impl.template, ratom reagent.ratom, deb reagent.debug, batch reagent.impl.batching, reagent.debug reagent.debug}, :imports nil}